{
  "Eval" : {
    "a string constant" : {
      "haml" : "=\"test\"",
      "html" : "test"
    },

    "an integer constant" : {
      "haml" : "=1",
      "html" : "1"
    },

    "a null constant" : {
      "haml" : "=ViewData[\"nullVar\"]",
      "html" : "",
	  "locals" : {
        "nullVar" : null
      }
    },

    "an integer constant inline within a tag" : {
      "haml" : "%tr = 1",
      "html" : "<tr>1</tr>"
    },

	"a viewbag variable" : {
	  "haml" : "=ViewData[\"var\"]",
	  "html" : "hello world",
	  "locals" : {
        "var" : "hello world"
      }
	}
  },

  "Attribute handling" : {
    "Ambiquous variable or literal parameter value with non-ASCII characters" : {
      "haml" : "%p(a='b.c', d=f)",
	  "html" : "<p a='b.c' d='f'></p>"
    },
    "Empty attribute value" : {
      "haml" : "%p(a)",
	  "html" : "<p a></p>"
    }
  },
  
  "Inline code" : {
    "a string constant" : {
      "haml" : "-ViewData[\"var\"] = \"hello\"\n= ViewData[\"var\"]",
	  "html" : "hello"
    }
  },

  "Code flow" : {
    "Passing conditional statement renders content" : {
      "haml" : "-if (true)\n  Hello",
	  "html" : "  Hello"
    },
    "Failing conditional statement does not render content" : {
      "haml" : "-if (false)\n  Hello",
	  "html" : ""
    },
    "Passing conditional statement with else block renders content" : {
      "haml" : "-if (true)\n  Hello\n-else\n  Goodbye",
	  "html" : "  Hello"
    },
    "For loop repeats content" : {
      "haml" : "-for (int c = 0; c < 3; c++)\n  Hello",
	  "html" : "  Hello\n  Hello\n  Hello"
    }
  },

  "Line Escaping" : {
    "Escaped tag" : {
      "haml" : "\\%p Paragraph tag goes here",
	  "html" : "%p Paragraph tag goes here"
    },
    "Escaped comment" : {
      "haml" : "\\/Test",
	  "html" : "/Test"
    },
    "Escaped DocType" : {
      "haml" : "\\!!! XML",
	  "html" : "!!! XML"
    }
  },

  "Legacy mangled Ruby-Style Tag Support" : {
    "Legacy-style one attribute" : {
      "haml" : "%p{a='b'}",
      "html" : "<p a='b'></p>"
    },

    "Legacy-style multiple attributes" : {
      "haml" : "%p{a='b' c='d'}",
      "html" : "<p a='b' c='d'></p>"
    },

    "HTML-style attributes separated with newlines" : {
      "haml" : "%p{a='b'\n  c='d'}",
      "html" : "<p a='b' c='d'></p>"
    },

    "Legacy-style 'class' as an attribute" : {
      "haml" : "%p{class='class1'}",
      "html" : "<p class='class1'></p>"
    },

    "Legacy-style tag with a CSS class and 'class' as an attribute" : {
      "haml" : "%p.class2{class='class1'}",
      "html" : "<p class='class1 class2'></p>"
    },

    "Legacy-style tag with 'id' as an attribute" : {
      "haml" : "%p{id='1'}",
      "html" : "<p id='1'></p>"
    },

    "Legacy-style tag with a CSS id and 'id' as an attribute" : {
      "haml" : "%p#id{id='1'}",
      "html" : "<p id='id_1'></p>"
    }
  }
}