NHAML C# CODING STANDARDS

# INDENTATION

Indentation for files:

Tab Size:      4
Indent Size:   4
Insert Spaces: true 
 

# BRACES

Conditionals should not require braces, as this implies an opportunity to extract a separate method. E.g:

	if (foo)
	  SumItems();

	private void SumItems()
	{
	  AddFirstItem();
	  AddSecondItem();
	}

Not:

	if (foo)
	{
	  AddFirstItem();
	  AddSecondItem();
	}

This technique makes the code more readable, and reduces the chance of creating "God methods".


# COMMENTS

Code should not require comments to explain its function, if you are writing code that requires comments then it implies you are either:

a) Putting too much functionality into one method - extract a well-named function to replace the comment
b) Have inadequately descriptive variable names (e.g. "pointer" instead of "currentNodeIndex")
c) Have no tests consuming the code that explains its functionality.

The only exception where a comment is encouraged is in code that must be non-obvious for performance reasons where there is a proven need for this optimisation.

# CONSTANTS

Use Pascal case; not Uppercase. E.g.

  public const string MyStringConstant;

Not:

  public const string MYSTRINGCONSTANT;

The reason for this is that client code should not know or care whether
the element is a constant or a property. Thus, a change from one to the other
will not require a change to any calling code.


# LINE BREAKS

Blank lines should be placed between logical groupings of statements and control
structures where appropriate.


# BREAKING LONG LINES

Lines that exceed 100 characters should be broken if possible. Often, long lines
can be broken around operators. E.g.

  ToolStripMenuItem fileItem
    = (ToolStripMenuItem)Shell.MainMenuStrip.Items[Constants.UI.FileMenu];

Not:

  ToolStripMenuItem fileItem = (ToolStripMenuItem)Shell.MainMenuStrip.Items[Constants.UI.FileMenu];

This enhances code readability by removing the need for horizontal scrolling in most
situations.


# INSTANCE FIELD NAMING

Instance fields should be prefixed with an underscore. Eg.

  private string _foo;


# "this" KEYWORD

Should not be used.


# PROPERTIES

Single line Property getters or setters should be formatted on one line:

  public string NameQuery
  {
    get { return _nameSearch.NameQuery; }
  }
 
# RESHARPER

No orange warning marks.
Cleanup code before commit. (See provided ReSharper Code Style xml file)
